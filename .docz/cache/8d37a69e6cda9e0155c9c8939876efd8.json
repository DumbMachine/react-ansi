{"remainingRequest":"/Users/raohai/works/react-ansi/node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js??ref--11-1!/Users/raohai/works/react-ansi/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js??ref--11-2!/Users/raohai/works/react-ansi/node_modules/_source-map-loader@0.2.4@source-map-loader/index.js!/Users/raohai/works/react-ansi/src/Spliter.ts","dependencies":[{"path":"/Users/raohai/works/react-ansi/src/Spliter.ts","mtime":1560051643971},{"path":"/Users/raohai/works/react-ansi/node_modules/_cache-loader@3.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raohai/works/react-ansi/node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raohai/works/react-ansi/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/raohai/works/react-ansi/node_modules/_source-map-loader@0.2.4@source-map-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvcmFvaGFpL3dvcmtzL3JlYWN0LWFuc2kvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvcmFvaGFpL3dvcmtzL3JlYWN0LWFuc2kvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZW50ZXJNb2R1bGU7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCmltcG9ydCB7IE1hdGNoZXIgfSBmcm9tICIuL21hdGNoZXIiOwpleHBvcnQgdmFyIHdhc2hSZWdFeHAgPSAnXHgxYj9bWzAtOTtdK1thLXpBLVpdJzsKCmlmICh0eXBlb2Ygd2FzaFJlZ0V4cCAhPT0gJ3VuZGVmaW5lZCcgJiYgd2FzaFJlZ0V4cCAmJiB3YXNoUmVnRXhwID09PSBPYmplY3Qod2FzaFJlZ0V4cCkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZSh3YXNoUmVnRXhwKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3YXNoUmVnRXhwLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAid2FzaFJlZ0V4cCIsCiAgICAgIGZpbGVuYW1lOiAic3JjL1NwbGl0ZXIudHMiCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgU3BsaXRlciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNwbGl0ZXIobWF0Y2hlcnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcGxpdGVyKTsKCiAgICB0aGlzLm1hdGNoZXJzID0gbWF0Y2hlcnM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3BsaXRlciwgW3sKICAgIGtleTogImV4ZWN1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGUobG9nKSB7CiAgICAgIHZhciBwYXJ0aWNhbHMgPSBbXTsKICAgICAgdmFyIGxhc3RJbmRleCA9IDA7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWF0Y2hlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgX3RoaXMkbWF0Y2hlcnMkaSA9IHRoaXMubWF0Y2hlcnNbaV0sCiAgICAgICAgICAgIHJlZ2V4U3RhcnQgPSBfdGhpcyRtYXRjaGVycyRpLnJlZ2V4U3RhcnQsCiAgICAgICAgICAgIHJlZ2V4RW5kID0gX3RoaXMkbWF0Y2hlcnMkaS5yZWdleEVuZCwKICAgICAgICAgICAgbGFiZWwgPSBfdGhpcyRtYXRjaGVycyRpLmxhYmVsLAogICAgICAgICAgICBtYXRjaGVyT3B0aW9ucyA9IF90aGlzJG1hdGNoZXJzJGkubWF0Y2hlck9wdGlvbnM7CiAgICAgICAgcmVnZXhTdGFydC5sYXN0SW5kZXggPSBsYXN0SW5kZXg7CiAgICAgICAgcmVnZXhFbmQubGFzdEluZGV4ID0gbGFzdEluZGV4OwogICAgICAgIHZhciBzdGFydE1hdGNoID0gcmVnZXhTdGFydC5leGVjKGxvZyk7CgogICAgICAgIGlmICghc3RhcnRNYXRjaCkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICB2YXIgZW5kTWF0Y2ggPSByZWdleEVuZC5leGVjKGxvZyk7CgogICAgICAgIGlmICghZW5kTWF0Y2gpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHRleHRMYWJlbCA9IGxhYmVsLmluZGV4T2YoJyQnKSA9PT0gMCA/IHN0YXJ0TWF0Y2hbcGFyc2VJbnQobGFiZWwucmVwbGFjZSgnJCcsICcnKSwgMTApXSA6IGxhYmVsOwogICAgICAgIHZhciBzdGFydFBvc2l0aW9uID0gc3RhcnRNYXRjaC5pbmRleDsKICAgICAgICB2YXIgZW5kUG9zaXRpb24gPSBlbmRNYXRjaC5pbmRleDsKICAgICAgICB2YXIgY3Vyc29yID0gZW5kUG9zaXRpb24gKyBlbmRNYXRjaFswXS5sZW5ndGg7CgogICAgICAgIGlmIChzdGFydFBvc2l0aW9uID4gbGFzdEluZGV4KSB7CiAgICAgICAgICBwYXJ0aWNhbHMucHVzaCh7CiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JywKICAgICAgICAgICAgY29udGVudDogbG9nLnN1YnN0cmluZyhsYXN0SW5kZXgsIHN0YXJ0UG9zaXRpb24pLAogICAgICAgICAgICBmb2xkOiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBwYXJ0aWNhbHMucHVzaCh7CiAgICAgICAgICBsYWJlbDogdGV4dExhYmVsLAogICAgICAgICAgdHlwZTogJ3BhcnRpY2FsJywKICAgICAgICAgIGNvbnRlbnQ6IGxvZy5zdWJzdHJpbmcoc3RhcnRQb3NpdGlvbiwgY3Vyc29yKSwKICAgICAgICAgIGZvbGQ6ICEhbWF0Y2hlck9wdGlvbnMuZGVmYXVsdEZvbGQKICAgICAgICB9KTsKICAgICAgICBsYXN0SW5kZXggPSBjdXJzb3I7CiAgICAgIH0KCiAgICAgIGlmIChsYXN0SW5kZXggPCBsb2cubGVuZ3RoKSB7CiAgICAgICAgcGFydGljYWxzLnB1c2goewogICAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgICAgY29udGVudDogbG9nLnN1YnN0cmluZyhsYXN0SW5kZXgpLAogICAgICAgICAgZm9sZDogZmFsc2UKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBhcnRpY2FsczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfX3JlYWN0c3RhbmRpbl9fcmVnZW5lcmF0ZUJ5RXZhbCIsCiAgICAvLyBAdHMtaWdub3JlCiAgICB2YWx1ZTogZnVuY3Rpb24gX19yZWFjdHN0YW5kaW5fX3JlZ2VuZXJhdGVCeUV2YWwoa2V5LCBjb2RlKSB7CiAgICAgIC8vIEB0cy1pZ25vcmUKICAgICAgdGhpc1trZXldID0gZXZhbChjb2RlKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBTcGxpdGVyOwp9KCk7CgppZiAodHlwZW9mIFNwbGl0ZXIgIT09ICd1bmRlZmluZWQnICYmIFNwbGl0ZXIgJiYgU3BsaXRlciA9PT0gT2JqZWN0KFNwbGl0ZXIpICYmIE9iamVjdC5pc0V4dGVuc2libGUoU3BsaXRlcikpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BsaXRlciwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIlNwbGl0ZXIiLAogICAgICBmaWxlbmFtZTogInNyYy9TcGxpdGVyLnRzIgogICAgfQogIH0pOwp9Cgp2YXIgbWF0Y2hlcnMgPSBbbmV3IE1hdGNoZXIoL3RyYXZpc19mb2xkOnN0YXJ0Olx3K1xuKF4uKiQpL2dtLCAvdHJhdmlzX2ZvbGQ6ZW5kOlx3K1xuKF4uKiQpL2dtLCAnJDEnLCB7CiAgZGVmYXVsdEZvbGQ6IHRydWUKfSldOwpleHBvcnQgdmFyIGRlZmF1bHRTcGxpdGVycyA9IG5ldyBTcGxpdGVyKG1hdGNoZXJzKTsKCmlmICh0eXBlb2YgZGVmYXVsdFNwbGl0ZXJzICE9PSAndW5kZWZpbmVkJyAmJiBkZWZhdWx0U3BsaXRlcnMgJiYgZGVmYXVsdFNwbGl0ZXJzID09PSBPYmplY3QoZGVmYXVsdFNwbGl0ZXJzKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRlZmF1bHRTcGxpdGVycykpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVmYXVsdFNwbGl0ZXJzLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiZGVmYXVsdFNwbGl0ZXJzIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvU3BsaXRlci50cyIKICAgIH0KICB9KTsKfQoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3Rlcih3YXNoUmVnRXhwLCAid2FzaFJlZ0V4cCIsICIvVXNlcnMvcmFvaGFpL3dvcmtzL3JlYWN0LWFuc2kvc3JjL1NwbGl0ZXIudHMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihTcGxpdGVyLCAiU3BsaXRlciIsICIvVXNlcnMvcmFvaGFpL3dvcmtzL3JlYWN0LWFuc2kvc3JjL1NwbGl0ZXIudHMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYXRjaGVycywgIm1hdGNoZXJzIiwgIi9Vc2Vycy9yYW9oYWkvd29ya3MvcmVhY3QtYW5zaS9zcmMvU3BsaXRlci50cyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGRlZmF1bHRTcGxpdGVycywgImRlZmF1bHRTcGxpdGVycyIsICIvVXNlcnMvcmFvaGFpL3dvcmtzL3JlYWN0LWFuc2kvc3JjL1NwbGl0ZXIudHMiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/raohai/works/react-ansi/src/Spliter.ts"],"names":["Matcher","washRegExp","Spliter","matchers","log","particals","lastIndex","i","length","regexStart","regexEnd","label","matcherOptions","startMatch","exec","endMatch","textLabel","indexOf","parseInt","replace","startPosition","index","endPosition","cursor","push","type","content","substring","fold","defaultFold","defaultSpliters"],"mappings":"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","sourcesContent":["import { Matcher, Partical } from \"./matcher\";\n\nexport const washRegExp = '\\x1b?[[0-9;]+[a-zA-Z]';\n\n\nexport class Spliter {\n  constructor(public matchers: Matcher[]) {}\n\n  execute(log: string) {\n    const particals: Partical[] = [];\n    let lastIndex = 0;\n\n    for (let i = 0; i < this.matchers.length; i++) {\n      const { regexStart, regexEnd, label, matcherOptions } = this.matchers[i];\n      regexStart.lastIndex = lastIndex;\n      regexEnd.lastIndex = lastIndex;\n      const startMatch = regexStart.exec(log);\n      if (!startMatch) {\n        continue;\n      }\n\n      const endMatch = regexEnd.exec(log);\n      if (!endMatch) {\n        continue;\n      }\n\n      const textLabel = label.indexOf('$') === 0 ? startMatch[\n        parseInt(label.replace('$', ''), 10)\n      ] : label;\n      const startPosition = startMatch.index;\n      const endPosition = endMatch.index;\n      const cursor = endPosition + endMatch[0].length;\n      if (startPosition > lastIndex) {\n        particals.push({\n          type: 'text',\n          content: log.substring(lastIndex, startPosition),\n          fold: false,\n        });\n      }\n\n      particals.push({\n        label: textLabel,\n        type: 'partical',\n        content: log.substring(startPosition, cursor),\n        fold: !!matcherOptions.defaultFold,\n      });\n      lastIndex = cursor;\n    }\n\n    if (lastIndex < log.length) {\n      particals.push({\n        type: 'text',\n        content: log.substring(lastIndex),\n        fold: false,\n      });\n    }\n\n    return particals;\n  }\n}\n\nconst matchers = [\n  new Matcher(\n    /travis_fold:start:\\w+\\n(^.*$)/gm,\n    /travis_fold:end:\\w+\\n(^.*$)/gm,\n    '$1',\n    {\n      defaultFold: true,\n    }\n  )\n] as Matcher[];\n\nexport const defaultSpliters = new Spliter(matchers);\n"]}]}